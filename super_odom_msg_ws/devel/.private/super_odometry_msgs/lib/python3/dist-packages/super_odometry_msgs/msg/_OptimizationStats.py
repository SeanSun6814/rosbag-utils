# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from super_odometry_msgs/OptimizationStats.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import std_msgs.msg
import super_odometry_msgs.msg

class OptimizationStats(genpy.Message):
  _md5sum = "db5910f4dcadf7d411c357fed874db59"
  _type = "super_odometry_msgs/OptimizationStats"
  _has_header = True  # flag to mark the presence of a Header object
  _full_text = """Header header
int32 laserCloudSurfFromMapNum
int32 laserCloudCornerFromMapNum
int32 laserCloudSurfStackNum
int32 laserCloudCornerStackNum
float64 total_translation
float64 total_rotation
float64 translation_from_last
float64 rotation_from_last
float64 time_elapsed
float64 latency
int32 n_iterations 
float64 average_distance 
float64 uncertainty_x
float64 uncertainty_y
float64 uncertainty_z
float64 uncertainty_roll
float64 uncertainty_pitch
float64 uncertainty_yaw
int32 meanSquareDistEdgeInlierNum
int32 meanSquareDistEdgeOutlierNum
int32 fitQualityCoeffEdgeInlierNum
int32 fitQualityCoeffEdgeOutlierNum
int32 meanSquareDistPlaneInlierNum
int32 meanSquareDistPlaneOutlierNum
int32 fitQualityCoeffPlaneInlierNum
int32 fitQualityCoeffPlaneOutlierNum
int32  PlaneMatchSuccess
int32  PlaneNoEnoughNeighbor
int32  PlaneNeighborTooFar 
int32  PlaneBADPCAStructure
int32  PlaneInvalidNumerical
int32  PlaneMSETOOLARGE
int32  PlaneUnknown
int32  PredictionSource 
super_odometry_msgs/IterationStats[] iterations
================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

================================================================================
MSG: super_odometry_msgs/IterationStats
# float64 time_elapsed
float64 translation_norm
float64 rotation_norm
float64 num_surf_from_scan
float64 num_corner_from_scan
"""
  __slots__ = ['header','laserCloudSurfFromMapNum','laserCloudCornerFromMapNum','laserCloudSurfStackNum','laserCloudCornerStackNum','total_translation','total_rotation','translation_from_last','rotation_from_last','time_elapsed','latency','n_iterations','average_distance','uncertainty_x','uncertainty_y','uncertainty_z','uncertainty_roll','uncertainty_pitch','uncertainty_yaw','meanSquareDistEdgeInlierNum','meanSquareDistEdgeOutlierNum','fitQualityCoeffEdgeInlierNum','fitQualityCoeffEdgeOutlierNum','meanSquareDistPlaneInlierNum','meanSquareDistPlaneOutlierNum','fitQualityCoeffPlaneInlierNum','fitQualityCoeffPlaneOutlierNum','PlaneMatchSuccess','PlaneNoEnoughNeighbor','PlaneNeighborTooFar','PlaneBADPCAStructure','PlaneInvalidNumerical','PlaneMSETOOLARGE','PlaneUnknown','PredictionSource','iterations']
  _slot_types = ['std_msgs/Header','int32','int32','int32','int32','float64','float64','float64','float64','float64','float64','int32','float64','float64','float64','float64','float64','float64','float64','int32','int32','int32','int32','int32','int32','int32','int32','int32','int32','int32','int32','int32','int32','int32','int32','super_odometry_msgs/IterationStats[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,laserCloudSurfFromMapNum,laserCloudCornerFromMapNum,laserCloudSurfStackNum,laserCloudCornerStackNum,total_translation,total_rotation,translation_from_last,rotation_from_last,time_elapsed,latency,n_iterations,average_distance,uncertainty_x,uncertainty_y,uncertainty_z,uncertainty_roll,uncertainty_pitch,uncertainty_yaw,meanSquareDistEdgeInlierNum,meanSquareDistEdgeOutlierNum,fitQualityCoeffEdgeInlierNum,fitQualityCoeffEdgeOutlierNum,meanSquareDistPlaneInlierNum,meanSquareDistPlaneOutlierNum,fitQualityCoeffPlaneInlierNum,fitQualityCoeffPlaneOutlierNum,PlaneMatchSuccess,PlaneNoEnoughNeighbor,PlaneNeighborTooFar,PlaneBADPCAStructure,PlaneInvalidNumerical,PlaneMSETOOLARGE,PlaneUnknown,PredictionSource,iterations

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(OptimizationStats, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.laserCloudSurfFromMapNum is None:
        self.laserCloudSurfFromMapNum = 0
      if self.laserCloudCornerFromMapNum is None:
        self.laserCloudCornerFromMapNum = 0
      if self.laserCloudSurfStackNum is None:
        self.laserCloudSurfStackNum = 0
      if self.laserCloudCornerStackNum is None:
        self.laserCloudCornerStackNum = 0
      if self.total_translation is None:
        self.total_translation = 0.
      if self.total_rotation is None:
        self.total_rotation = 0.
      if self.translation_from_last is None:
        self.translation_from_last = 0.
      if self.rotation_from_last is None:
        self.rotation_from_last = 0.
      if self.time_elapsed is None:
        self.time_elapsed = 0.
      if self.latency is None:
        self.latency = 0.
      if self.n_iterations is None:
        self.n_iterations = 0
      if self.average_distance is None:
        self.average_distance = 0.
      if self.uncertainty_x is None:
        self.uncertainty_x = 0.
      if self.uncertainty_y is None:
        self.uncertainty_y = 0.
      if self.uncertainty_z is None:
        self.uncertainty_z = 0.
      if self.uncertainty_roll is None:
        self.uncertainty_roll = 0.
      if self.uncertainty_pitch is None:
        self.uncertainty_pitch = 0.
      if self.uncertainty_yaw is None:
        self.uncertainty_yaw = 0.
      if self.meanSquareDistEdgeInlierNum is None:
        self.meanSquareDistEdgeInlierNum = 0
      if self.meanSquareDistEdgeOutlierNum is None:
        self.meanSquareDistEdgeOutlierNum = 0
      if self.fitQualityCoeffEdgeInlierNum is None:
        self.fitQualityCoeffEdgeInlierNum = 0
      if self.fitQualityCoeffEdgeOutlierNum is None:
        self.fitQualityCoeffEdgeOutlierNum = 0
      if self.meanSquareDistPlaneInlierNum is None:
        self.meanSquareDistPlaneInlierNum = 0
      if self.meanSquareDistPlaneOutlierNum is None:
        self.meanSquareDistPlaneOutlierNum = 0
      if self.fitQualityCoeffPlaneInlierNum is None:
        self.fitQualityCoeffPlaneInlierNum = 0
      if self.fitQualityCoeffPlaneOutlierNum is None:
        self.fitQualityCoeffPlaneOutlierNum = 0
      if self.PlaneMatchSuccess is None:
        self.PlaneMatchSuccess = 0
      if self.PlaneNoEnoughNeighbor is None:
        self.PlaneNoEnoughNeighbor = 0
      if self.PlaneNeighborTooFar is None:
        self.PlaneNeighborTooFar = 0
      if self.PlaneBADPCAStructure is None:
        self.PlaneBADPCAStructure = 0
      if self.PlaneInvalidNumerical is None:
        self.PlaneInvalidNumerical = 0
      if self.PlaneMSETOOLARGE is None:
        self.PlaneMSETOOLARGE = 0
      if self.PlaneUnknown is None:
        self.PlaneUnknown = 0
      if self.PredictionSource is None:
        self.PredictionSource = 0
      if self.iterations is None:
        self.iterations = []
    else:
      self.header = std_msgs.msg.Header()
      self.laserCloudSurfFromMapNum = 0
      self.laserCloudCornerFromMapNum = 0
      self.laserCloudSurfStackNum = 0
      self.laserCloudCornerStackNum = 0
      self.total_translation = 0.
      self.total_rotation = 0.
      self.translation_from_last = 0.
      self.rotation_from_last = 0.
      self.time_elapsed = 0.
      self.latency = 0.
      self.n_iterations = 0
      self.average_distance = 0.
      self.uncertainty_x = 0.
      self.uncertainty_y = 0.
      self.uncertainty_z = 0.
      self.uncertainty_roll = 0.
      self.uncertainty_pitch = 0.
      self.uncertainty_yaw = 0.
      self.meanSquareDistEdgeInlierNum = 0
      self.meanSquareDistEdgeOutlierNum = 0
      self.fitQualityCoeffEdgeInlierNum = 0
      self.fitQualityCoeffEdgeOutlierNum = 0
      self.meanSquareDistPlaneInlierNum = 0
      self.meanSquareDistPlaneOutlierNum = 0
      self.fitQualityCoeffPlaneInlierNum = 0
      self.fitQualityCoeffPlaneOutlierNum = 0
      self.PlaneMatchSuccess = 0
      self.PlaneNoEnoughNeighbor = 0
      self.PlaneNeighborTooFar = 0
      self.PlaneBADPCAStructure = 0
      self.PlaneInvalidNumerical = 0
      self.PlaneMSETOOLARGE = 0
      self.PlaneUnknown = 0
      self.PredictionSource = 0
      self.iterations = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_4i6di7d16i().pack(_x.laserCloudSurfFromMapNum, _x.laserCloudCornerFromMapNum, _x.laserCloudSurfStackNum, _x.laserCloudCornerStackNum, _x.total_translation, _x.total_rotation, _x.translation_from_last, _x.rotation_from_last, _x.time_elapsed, _x.latency, _x.n_iterations, _x.average_distance, _x.uncertainty_x, _x.uncertainty_y, _x.uncertainty_z, _x.uncertainty_roll, _x.uncertainty_pitch, _x.uncertainty_yaw, _x.meanSquareDistEdgeInlierNum, _x.meanSquareDistEdgeOutlierNum, _x.fitQualityCoeffEdgeInlierNum, _x.fitQualityCoeffEdgeOutlierNum, _x.meanSquareDistPlaneInlierNum, _x.meanSquareDistPlaneOutlierNum, _x.fitQualityCoeffPlaneInlierNum, _x.fitQualityCoeffPlaneOutlierNum, _x.PlaneMatchSuccess, _x.PlaneNoEnoughNeighbor, _x.PlaneNeighborTooFar, _x.PlaneBADPCAStructure, _x.PlaneInvalidNumerical, _x.PlaneMSETOOLARGE, _x.PlaneUnknown, _x.PredictionSource))
      length = len(self.iterations)
      buff.write(_struct_I.pack(length))
      for val1 in self.iterations:
        _x = val1
        buff.write(_get_struct_4d().pack(_x.translation_norm, _x.rotation_norm, _x.num_surf_from_scan, _x.num_corner_from_scan))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.iterations is None:
        self.iterations = None
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 188
      (_x.laserCloudSurfFromMapNum, _x.laserCloudCornerFromMapNum, _x.laserCloudSurfStackNum, _x.laserCloudCornerStackNum, _x.total_translation, _x.total_rotation, _x.translation_from_last, _x.rotation_from_last, _x.time_elapsed, _x.latency, _x.n_iterations, _x.average_distance, _x.uncertainty_x, _x.uncertainty_y, _x.uncertainty_z, _x.uncertainty_roll, _x.uncertainty_pitch, _x.uncertainty_yaw, _x.meanSquareDistEdgeInlierNum, _x.meanSquareDistEdgeOutlierNum, _x.fitQualityCoeffEdgeInlierNum, _x.fitQualityCoeffEdgeOutlierNum, _x.meanSquareDistPlaneInlierNum, _x.meanSquareDistPlaneOutlierNum, _x.fitQualityCoeffPlaneInlierNum, _x.fitQualityCoeffPlaneOutlierNum, _x.PlaneMatchSuccess, _x.PlaneNoEnoughNeighbor, _x.PlaneNeighborTooFar, _x.PlaneBADPCAStructure, _x.PlaneInvalidNumerical, _x.PlaneMSETOOLARGE, _x.PlaneUnknown, _x.PredictionSource,) = _get_struct_4i6di7d16i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.iterations = []
      for i in range(0, length):
        val1 = super_odometry_msgs.msg.IterationStats()
        _x = val1
        start = end
        end += 32
        (_x.translation_norm, _x.rotation_norm, _x.num_surf_from_scan, _x.num_corner_from_scan,) = _get_struct_4d().unpack(str[start:end])
        self.iterations.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_4i6di7d16i().pack(_x.laserCloudSurfFromMapNum, _x.laserCloudCornerFromMapNum, _x.laserCloudSurfStackNum, _x.laserCloudCornerStackNum, _x.total_translation, _x.total_rotation, _x.translation_from_last, _x.rotation_from_last, _x.time_elapsed, _x.latency, _x.n_iterations, _x.average_distance, _x.uncertainty_x, _x.uncertainty_y, _x.uncertainty_z, _x.uncertainty_roll, _x.uncertainty_pitch, _x.uncertainty_yaw, _x.meanSquareDistEdgeInlierNum, _x.meanSquareDistEdgeOutlierNum, _x.fitQualityCoeffEdgeInlierNum, _x.fitQualityCoeffEdgeOutlierNum, _x.meanSquareDistPlaneInlierNum, _x.meanSquareDistPlaneOutlierNum, _x.fitQualityCoeffPlaneInlierNum, _x.fitQualityCoeffPlaneOutlierNum, _x.PlaneMatchSuccess, _x.PlaneNoEnoughNeighbor, _x.PlaneNeighborTooFar, _x.PlaneBADPCAStructure, _x.PlaneInvalidNumerical, _x.PlaneMSETOOLARGE, _x.PlaneUnknown, _x.PredictionSource))
      length = len(self.iterations)
      buff.write(_struct_I.pack(length))
      for val1 in self.iterations:
        _x = val1
        buff.write(_get_struct_4d().pack(_x.translation_norm, _x.rotation_norm, _x.num_surf_from_scan, _x.num_corner_from_scan))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.iterations is None:
        self.iterations = None
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 188
      (_x.laserCloudSurfFromMapNum, _x.laserCloudCornerFromMapNum, _x.laserCloudSurfStackNum, _x.laserCloudCornerStackNum, _x.total_translation, _x.total_rotation, _x.translation_from_last, _x.rotation_from_last, _x.time_elapsed, _x.latency, _x.n_iterations, _x.average_distance, _x.uncertainty_x, _x.uncertainty_y, _x.uncertainty_z, _x.uncertainty_roll, _x.uncertainty_pitch, _x.uncertainty_yaw, _x.meanSquareDistEdgeInlierNum, _x.meanSquareDistEdgeOutlierNum, _x.fitQualityCoeffEdgeInlierNum, _x.fitQualityCoeffEdgeOutlierNum, _x.meanSquareDistPlaneInlierNum, _x.meanSquareDistPlaneOutlierNum, _x.fitQualityCoeffPlaneInlierNum, _x.fitQualityCoeffPlaneOutlierNum, _x.PlaneMatchSuccess, _x.PlaneNoEnoughNeighbor, _x.PlaneNeighborTooFar, _x.PlaneBADPCAStructure, _x.PlaneInvalidNumerical, _x.PlaneMSETOOLARGE, _x.PlaneUnknown, _x.PredictionSource,) = _get_struct_4i6di7d16i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.iterations = []
      for i in range(0, length):
        val1 = super_odometry_msgs.msg.IterationStats()
        _x = val1
        start = end
        end += 32
        (_x.translation_norm, _x.rotation_norm, _x.num_surf_from_scan, _x.num_corner_from_scan,) = _get_struct_4d().unpack(str[start:end])
        self.iterations.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_4d = None
def _get_struct_4d():
    global _struct_4d
    if _struct_4d is None:
        _struct_4d = struct.Struct("<4d")
    return _struct_4d
_struct_4i6di7d16i = None
def _get_struct_4i6di7d16i():
    global _struct_4i6di7d16i
    if _struct_4i6di7d16i is None:
        _struct_4i6di7d16i = struct.Struct("<4i6di7d16i")
    return _struct_4i6di7d16i
