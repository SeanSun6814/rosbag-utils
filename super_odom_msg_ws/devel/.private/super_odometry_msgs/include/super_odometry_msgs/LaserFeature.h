// Generated by gencpp from file super_odometry_msgs/LaserFeature.msg
// DO NOT EDIT!


#ifndef SUPER_ODOMETRY_MSGS_MESSAGE_LASERFEATURE_H
#define SUPER_ODOMETRY_MSGS_MESSAGE_LASERFEATURE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <sensor_msgs/PointCloud2.h>
#include <sensor_msgs/PointCloud2.h>
#include <sensor_msgs/PointCloud2.h>
#include <sensor_msgs/PointCloud2.h>

namespace super_odometry_msgs
{
template <class ContainerAllocator>
struct LaserFeature_
{
  typedef LaserFeature_<ContainerAllocator> Type;

  LaserFeature_()
    : header()
    , sensor(0)
    , imuAvailable(0)
    , odomAvailable(0)
    , imuQuaternionX(0.0)
    , imuQuaternionY(0.0)
    , imuQuaternionZ(0.0)
    , imuQuaternionW(0.0)
    , initialPoseX(0.0)
    , initialPoseY(0.0)
    , initialPoseZ(0.0)
    , initialQuaternionX(0.0)
    , initialQuaternionY(0.0)
    , initialQuaternionZ(0.0)
    , initialQuaternionW(0.0)
    , imuPreintegrationResetId(0)
    , cloud_nodistortion()
    , cloud_corner()
    , cloud_surface()
    , cloud_realsense()  {
    }
  LaserFeature_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , sensor(0)
    , imuAvailable(0)
    , odomAvailable(0)
    , imuQuaternionX(0.0)
    , imuQuaternionY(0.0)
    , imuQuaternionZ(0.0)
    , imuQuaternionW(0.0)
    , initialPoseX(0.0)
    , initialPoseY(0.0)
    , initialPoseZ(0.0)
    , initialQuaternionX(0.0)
    , initialQuaternionY(0.0)
    , initialQuaternionZ(0.0)
    , initialQuaternionW(0.0)
    , imuPreintegrationResetId(0)
    , cloud_nodistortion(_alloc)
    , cloud_corner(_alloc)
    , cloud_surface(_alloc)
    , cloud_realsense(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef int64_t _sensor_type;
  _sensor_type sensor;

   typedef int64_t _imuAvailable_type;
  _imuAvailable_type imuAvailable;

   typedef int64_t _odomAvailable_type;
  _odomAvailable_type odomAvailable;

   typedef double _imuQuaternionX_type;
  _imuQuaternionX_type imuQuaternionX;

   typedef double _imuQuaternionY_type;
  _imuQuaternionY_type imuQuaternionY;

   typedef double _imuQuaternionZ_type;
  _imuQuaternionZ_type imuQuaternionZ;

   typedef double _imuQuaternionW_type;
  _imuQuaternionW_type imuQuaternionW;

   typedef double _initialPoseX_type;
  _initialPoseX_type initialPoseX;

   typedef double _initialPoseY_type;
  _initialPoseY_type initialPoseY;

   typedef double _initialPoseZ_type;
  _initialPoseZ_type initialPoseZ;

   typedef double _initialQuaternionX_type;
  _initialQuaternionX_type initialQuaternionX;

   typedef double _initialQuaternionY_type;
  _initialQuaternionY_type initialQuaternionY;

   typedef double _initialQuaternionZ_type;
  _initialQuaternionZ_type initialQuaternionZ;

   typedef double _initialQuaternionW_type;
  _initialQuaternionW_type initialQuaternionW;

   typedef int64_t _imuPreintegrationResetId_type;
  _imuPreintegrationResetId_type imuPreintegrationResetId;

   typedef  ::sensor_msgs::PointCloud2_<ContainerAllocator>  _cloud_nodistortion_type;
  _cloud_nodistortion_type cloud_nodistortion;

   typedef  ::sensor_msgs::PointCloud2_<ContainerAllocator>  _cloud_corner_type;
  _cloud_corner_type cloud_corner;

   typedef  ::sensor_msgs::PointCloud2_<ContainerAllocator>  _cloud_surface_type;
  _cloud_surface_type cloud_surface;

   typedef  ::sensor_msgs::PointCloud2_<ContainerAllocator>  _cloud_realsense_type;
  _cloud_realsense_type cloud_realsense;





  typedef boost::shared_ptr< ::super_odometry_msgs::LaserFeature_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::super_odometry_msgs::LaserFeature_<ContainerAllocator> const> ConstPtr;

}; // struct LaserFeature_

typedef ::super_odometry_msgs::LaserFeature_<std::allocator<void> > LaserFeature;

typedef boost::shared_ptr< ::super_odometry_msgs::LaserFeature > LaserFeaturePtr;
typedef boost::shared_ptr< ::super_odometry_msgs::LaserFeature const> LaserFeatureConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::super_odometry_msgs::LaserFeature_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::super_odometry_msgs::LaserFeature_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::super_odometry_msgs::LaserFeature_<ContainerAllocator1> & lhs, const ::super_odometry_msgs::LaserFeature_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.sensor == rhs.sensor &&
    lhs.imuAvailable == rhs.imuAvailable &&
    lhs.odomAvailable == rhs.odomAvailable &&
    lhs.imuQuaternionX == rhs.imuQuaternionX &&
    lhs.imuQuaternionY == rhs.imuQuaternionY &&
    lhs.imuQuaternionZ == rhs.imuQuaternionZ &&
    lhs.imuQuaternionW == rhs.imuQuaternionW &&
    lhs.initialPoseX == rhs.initialPoseX &&
    lhs.initialPoseY == rhs.initialPoseY &&
    lhs.initialPoseZ == rhs.initialPoseZ &&
    lhs.initialQuaternionX == rhs.initialQuaternionX &&
    lhs.initialQuaternionY == rhs.initialQuaternionY &&
    lhs.initialQuaternionZ == rhs.initialQuaternionZ &&
    lhs.initialQuaternionW == rhs.initialQuaternionW &&
    lhs.imuPreintegrationResetId == rhs.imuPreintegrationResetId &&
    lhs.cloud_nodistortion == rhs.cloud_nodistortion &&
    lhs.cloud_corner == rhs.cloud_corner &&
    lhs.cloud_surface == rhs.cloud_surface &&
    lhs.cloud_realsense == rhs.cloud_realsense;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::super_odometry_msgs::LaserFeature_<ContainerAllocator1> & lhs, const ::super_odometry_msgs::LaserFeature_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace super_odometry_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::super_odometry_msgs::LaserFeature_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::super_odometry_msgs::LaserFeature_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::super_odometry_msgs::LaserFeature_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::super_odometry_msgs::LaserFeature_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::super_odometry_msgs::LaserFeature_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::super_odometry_msgs::LaserFeature_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::super_odometry_msgs::LaserFeature_<ContainerAllocator> >
{
  static const char* value()
  {
    return "4df4873a8473f99d913205e932f77f89";
  }

  static const char* value(const ::super_odometry_msgs::LaserFeature_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x4df4873a8473f99dULL;
  static const uint64_t static_value2 = 0x913205e932f77f89ULL;
};

template<class ContainerAllocator>
struct DataType< ::super_odometry_msgs::LaserFeature_<ContainerAllocator> >
{
  static const char* value()
  {
    return "super_odometry_msgs/LaserFeature";
  }

  static const char* value(const ::super_odometry_msgs::LaserFeature_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::super_odometry_msgs::LaserFeature_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# feature Info\n"
"Header header \n"
"\n"
"int64 sensor\n"
"\n"
"int64 imuAvailable\n"
"int64 odomAvailable\n"
"\n"
"# IMU initial guess for laser mapping\n"
"float64 imuQuaternionX\n"
"float64 imuQuaternionY\n"
"float64 imuQuaternionZ\n"
"float64 imuQuaternionW\n"
"\n"
"# Odometry initial guess for laser mapping\n"
"float64 initialPoseX\n"
"float64 initialPoseY\n"
"float64 initialPoseZ\n"
"float64 initialQuaternionX\n"
"float64 initialQuaternionY\n"
"float64 initialQuaternionZ\n"
"float64 initialQuaternionW \n"
"\n"
"# Preintegration reset ID\n"
"int64 imuPreintegrationResetId\n"
"\n"
"# Point cloud messages\n"
"sensor_msgs/PointCloud2 cloud_nodistortion  # original cloud remove distortion\n"
"sensor_msgs/PointCloud2 cloud_corner    # extracted corner feature\n"
"sensor_msgs/PointCloud2 cloud_surface   # extracted surface feature\n"
"sensor_msgs/PointCloud2 cloud_realsense   # extracted surface feature from realsense\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: sensor_msgs/PointCloud2\n"
"# This message holds a collection of N-dimensional points, which may\n"
"# contain additional information such as normals, intensity, etc. The\n"
"# point data is stored as a binary blob, its layout described by the\n"
"# contents of the \"fields\" array.\n"
"\n"
"# The point cloud data may be organized 2d (image-like) or 1d\n"
"# (unordered). Point clouds organized as 2d images may be produced by\n"
"# camera depth sensors such as stereo or time-of-flight.\n"
"\n"
"# Time of sensor data acquisition, and the coordinate frame ID (for 3d\n"
"# points).\n"
"Header header\n"
"\n"
"# 2D structure of the point cloud. If the cloud is unordered, height is\n"
"# 1 and width is the length of the point cloud.\n"
"uint32 height\n"
"uint32 width\n"
"\n"
"# Describes the channels and their layout in the binary data blob.\n"
"PointField[] fields\n"
"\n"
"bool    is_bigendian # Is this data bigendian?\n"
"uint32  point_step   # Length of a point in bytes\n"
"uint32  row_step     # Length of a row in bytes\n"
"uint8[] data         # Actual point data, size is (row_step*height)\n"
"\n"
"bool is_dense        # True if there are no invalid points\n"
"\n"
"================================================================================\n"
"MSG: sensor_msgs/PointField\n"
"# This message holds the description of one point entry in the\n"
"# PointCloud2 message format.\n"
"uint8 INT8    = 1\n"
"uint8 UINT8   = 2\n"
"uint8 INT16   = 3\n"
"uint8 UINT16  = 4\n"
"uint8 INT32   = 5\n"
"uint8 UINT32  = 6\n"
"uint8 FLOAT32 = 7\n"
"uint8 FLOAT64 = 8\n"
"\n"
"string name      # Name of field\n"
"uint32 offset    # Offset from start of point struct\n"
"uint8  datatype  # Datatype enumeration, see above\n"
"uint32 count     # How many elements in the field\n"
;
  }

  static const char* value(const ::super_odometry_msgs::LaserFeature_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::super_odometry_msgs::LaserFeature_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.sensor);
      stream.next(m.imuAvailable);
      stream.next(m.odomAvailable);
      stream.next(m.imuQuaternionX);
      stream.next(m.imuQuaternionY);
      stream.next(m.imuQuaternionZ);
      stream.next(m.imuQuaternionW);
      stream.next(m.initialPoseX);
      stream.next(m.initialPoseY);
      stream.next(m.initialPoseZ);
      stream.next(m.initialQuaternionX);
      stream.next(m.initialQuaternionY);
      stream.next(m.initialQuaternionZ);
      stream.next(m.initialQuaternionW);
      stream.next(m.imuPreintegrationResetId);
      stream.next(m.cloud_nodistortion);
      stream.next(m.cloud_corner);
      stream.next(m.cloud_surface);
      stream.next(m.cloud_realsense);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct LaserFeature_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::super_odometry_msgs::LaserFeature_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::super_odometry_msgs::LaserFeature_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "sensor: ";
    Printer<int64_t>::stream(s, indent + "  ", v.sensor);
    s << indent << "imuAvailable: ";
    Printer<int64_t>::stream(s, indent + "  ", v.imuAvailable);
    s << indent << "odomAvailable: ";
    Printer<int64_t>::stream(s, indent + "  ", v.odomAvailable);
    s << indent << "imuQuaternionX: ";
    Printer<double>::stream(s, indent + "  ", v.imuQuaternionX);
    s << indent << "imuQuaternionY: ";
    Printer<double>::stream(s, indent + "  ", v.imuQuaternionY);
    s << indent << "imuQuaternionZ: ";
    Printer<double>::stream(s, indent + "  ", v.imuQuaternionZ);
    s << indent << "imuQuaternionW: ";
    Printer<double>::stream(s, indent + "  ", v.imuQuaternionW);
    s << indent << "initialPoseX: ";
    Printer<double>::stream(s, indent + "  ", v.initialPoseX);
    s << indent << "initialPoseY: ";
    Printer<double>::stream(s, indent + "  ", v.initialPoseY);
    s << indent << "initialPoseZ: ";
    Printer<double>::stream(s, indent + "  ", v.initialPoseZ);
    s << indent << "initialQuaternionX: ";
    Printer<double>::stream(s, indent + "  ", v.initialQuaternionX);
    s << indent << "initialQuaternionY: ";
    Printer<double>::stream(s, indent + "  ", v.initialQuaternionY);
    s << indent << "initialQuaternionZ: ";
    Printer<double>::stream(s, indent + "  ", v.initialQuaternionZ);
    s << indent << "initialQuaternionW: ";
    Printer<double>::stream(s, indent + "  ", v.initialQuaternionW);
    s << indent << "imuPreintegrationResetId: ";
    Printer<int64_t>::stream(s, indent + "  ", v.imuPreintegrationResetId);
    s << indent << "cloud_nodistortion: ";
    s << std::endl;
    Printer< ::sensor_msgs::PointCloud2_<ContainerAllocator> >::stream(s, indent + "  ", v.cloud_nodistortion);
    s << indent << "cloud_corner: ";
    s << std::endl;
    Printer< ::sensor_msgs::PointCloud2_<ContainerAllocator> >::stream(s, indent + "  ", v.cloud_corner);
    s << indent << "cloud_surface: ";
    s << std::endl;
    Printer< ::sensor_msgs::PointCloud2_<ContainerAllocator> >::stream(s, indent + "  ", v.cloud_surface);
    s << indent << "cloud_realsense: ";
    s << std::endl;
    Printer< ::sensor_msgs::PointCloud2_<ContainerAllocator> >::stream(s, indent + "  ", v.cloud_realsense);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SUPER_ODOMETRY_MSGS_MESSAGE_LASERFEATURE_H
