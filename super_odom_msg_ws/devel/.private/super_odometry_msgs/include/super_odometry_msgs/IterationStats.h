// Generated by gencpp from file super_odometry_msgs/IterationStats.msg
// DO NOT EDIT!


#ifndef SUPER_ODOMETRY_MSGS_MESSAGE_ITERATIONSTATS_H
#define SUPER_ODOMETRY_MSGS_MESSAGE_ITERATIONSTATS_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace super_odometry_msgs
{
template <class ContainerAllocator>
struct IterationStats_
{
  typedef IterationStats_<ContainerAllocator> Type;

  IterationStats_()
    : translation_norm(0.0)
    , rotation_norm(0.0)
    , num_surf_from_scan(0.0)
    , num_corner_from_scan(0.0)  {
    }
  IterationStats_(const ContainerAllocator& _alloc)
    : translation_norm(0.0)
    , rotation_norm(0.0)
    , num_surf_from_scan(0.0)
    , num_corner_from_scan(0.0)  {
  (void)_alloc;
    }



   typedef double _translation_norm_type;
  _translation_norm_type translation_norm;

   typedef double _rotation_norm_type;
  _rotation_norm_type rotation_norm;

   typedef double _num_surf_from_scan_type;
  _num_surf_from_scan_type num_surf_from_scan;

   typedef double _num_corner_from_scan_type;
  _num_corner_from_scan_type num_corner_from_scan;





  typedef boost::shared_ptr< ::super_odometry_msgs::IterationStats_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::super_odometry_msgs::IterationStats_<ContainerAllocator> const> ConstPtr;

}; // struct IterationStats_

typedef ::super_odometry_msgs::IterationStats_<std::allocator<void> > IterationStats;

typedef boost::shared_ptr< ::super_odometry_msgs::IterationStats > IterationStatsPtr;
typedef boost::shared_ptr< ::super_odometry_msgs::IterationStats const> IterationStatsConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::super_odometry_msgs::IterationStats_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::super_odometry_msgs::IterationStats_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::super_odometry_msgs::IterationStats_<ContainerAllocator1> & lhs, const ::super_odometry_msgs::IterationStats_<ContainerAllocator2> & rhs)
{
  return lhs.translation_norm == rhs.translation_norm &&
    lhs.rotation_norm == rhs.rotation_norm &&
    lhs.num_surf_from_scan == rhs.num_surf_from_scan &&
    lhs.num_corner_from_scan == rhs.num_corner_from_scan;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::super_odometry_msgs::IterationStats_<ContainerAllocator1> & lhs, const ::super_odometry_msgs::IterationStats_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace super_odometry_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::super_odometry_msgs::IterationStats_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::super_odometry_msgs::IterationStats_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::super_odometry_msgs::IterationStats_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::super_odometry_msgs::IterationStats_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::super_odometry_msgs::IterationStats_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::super_odometry_msgs::IterationStats_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::super_odometry_msgs::IterationStats_<ContainerAllocator> >
{
  static const char* value()
  {
    return "90f71769f61c5a37fe60b3deb9b24f06";
  }

  static const char* value(const ::super_odometry_msgs::IterationStats_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x90f71769f61c5a37ULL;
  static const uint64_t static_value2 = 0xfe60b3deb9b24f06ULL;
};

template<class ContainerAllocator>
struct DataType< ::super_odometry_msgs::IterationStats_<ContainerAllocator> >
{
  static const char* value()
  {
    return "super_odometry_msgs/IterationStats";
  }

  static const char* value(const ::super_odometry_msgs::IterationStats_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::super_odometry_msgs::IterationStats_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# float64 time_elapsed\n"
"float64 translation_norm\n"
"float64 rotation_norm\n"
"float64 num_surf_from_scan\n"
"float64 num_corner_from_scan\n"
;
  }

  static const char* value(const ::super_odometry_msgs::IterationStats_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::super_odometry_msgs::IterationStats_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.translation_norm);
      stream.next(m.rotation_norm);
      stream.next(m.num_surf_from_scan);
      stream.next(m.num_corner_from_scan);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct IterationStats_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::super_odometry_msgs::IterationStats_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::super_odometry_msgs::IterationStats_<ContainerAllocator>& v)
  {
    s << indent << "translation_norm: ";
    Printer<double>::stream(s, indent + "  ", v.translation_norm);
    s << indent << "rotation_norm: ";
    Printer<double>::stream(s, indent + "  ", v.rotation_norm);
    s << indent << "num_surf_from_scan: ";
    Printer<double>::stream(s, indent + "  ", v.num_surf_from_scan);
    s << indent << "num_corner_from_scan: ";
    Printer<double>::stream(s, indent + "  ", v.num_corner_from_scan);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SUPER_ODOMETRY_MSGS_MESSAGE_ITERATIONSTATS_H
